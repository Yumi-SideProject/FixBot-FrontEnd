import React, { useState, useEffect } from "react";
import { useSearchParams, useNavigate } from "react-router-dom";
import "../styles/chat.css";
import { sendMessageToOpenAI } from "../services/api.js";
import { uploadImageToSupabase } from "../services/upload";

function ChatBot() {
    const [sessionId] = useState(() => {
        let saved = localStorage.getItem("fixbot_sessionId");
        if (!saved) {
            saved = crypto.randomUUID();
            localStorage.setItem("fixbot_sessionId", saved);
        }
        return saved;
    });
    const [searchParams] = useSearchParams();
    const brand = searchParams.get("brand") || "Ïïå Ïàò ÏóÜÏùå";
    const category = searchParams.get("category") || "Ïïå Ïàò ÏóÜÏùå";
    const subcategory = searchParams.get("subcategory") || "Ïïå Ïàò ÏóÜÏùå";
    const question = searchParams.get("question") || "Ïïå Ïàò ÏóÜÏùå";

    const navigate = useNavigate();

    const [searchQuery, setSearchQuery] = useState(null);
    const [pendingSearchQuery, setPendingSearchQuery] = useState(null);
    const [messages, setMessages] = useState([
        {
            sender: "bot",
            text: `ÏïàÎÖïÌïòÏÑ∏Ïöî! üòä Ï†ÄÎäî FixBotÏûÖÎãàÎã§.\n` +
                `Í≥†Í∞ùÎãòÍªòÏÑú ÏûÖÎ†•ÌïòÏã† Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï†Í≤åÏöî!\n` +
                `Î∏åÎûúÎìú: ${brand} | Ïπ¥ÌÖåÍ≥†Î¶¨: ${category} | ÏÑ∏Î∂Ä Ïπ¥ÌÖåÍ≥†Î¶¨: ${subcategory}\n`+
                `ÏßàÎ¨∏: ${question}\n` +
                `üîç ÎßûÎã§Î©¥ ÏïÑÎûò Ï∞ΩÏóê ÎåÄÎãµÌï¥Ï£ºÏÑ∏Ïöî!`
        }
    ]);

    const [imageFile, setImageFile] = useState(null);
    const [imagePreviewUrl, setImagePreviewUrl] = useState(null);

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setImageFile(file);
            setImagePreviewUrl(URL.createObjectURL(file));
        }
    };

    const [messageQueue, setMessageQueue] = useState([]);
    const [input, setInput] = useState("");
    const [isTyping, setIsTyping] = useState(false);

    const flushQueue = () => {
        const combined = [...messageQueue];
        const lastWithQuery = combined.find((msg) =>
            msg.sender === "bot" && msg.text.includes("##Í≤ÄÏÉâÏñ¥:")
        );

        if (lastWithQuery) {
            const queryLine = lastWithQuery.text
                .split("\n")
                .find((line) => line.trim().startsWith("##Í≤ÄÏÉâÏñ¥:"));

            if (queryLine) {
                const query = queryLine.replace("##Í≤ÄÏÉâÏñ¥:", "").trim();
                console.log("üéØ ÏµúÏ¢Ö Í≤ÄÏÉâÏñ¥ Í∞êÏßÄÎê®:", query);
                setPendingSearchQuery(query);
            }
        }

        setMessages(prev => [...prev, ...combined]);
        setMessageQueue([]);
    };

    useEffect(() => {
        const saved = sessionStorage.getItem("fixbot_messages");
        if (saved) {
            try {
                const parsed = JSON.parse(saved);
                if (Array.isArray(parsed)) {
                    setMessages(parsed);
                }
            } catch (e) {
                console.error("ÏÑ∏ÏÖò Î©îÏãúÏßÄ Î≥µÏõê Ïã§Ìå®:", e);
            }
        }
    }, []);

    useEffect(() => {
        const saved = sessionStorage.getItem("fixbot_messages");
        if (saved) {
            try {
                const parsed = JSON.parse(saved);
                if (Array.isArray(parsed)) {
                    setMessages(parsed);
                }
            } catch (e) {
                console.error("ÏÑ∏ÏÖò Î©îÏãúÏßÄ Î≥µÏõê Ïã§Ìå®:", e);
            }
        }
    }, []);

    useEffect(() => {
        if (pendingSearchQuery) {
            setSearchQuery(pendingSearchQuery);
            setPendingSearchQuery(null);
        }
    }, [pendingSearchQuery]);

    useEffect(() => {
        if (messageQueue.length > 0 && !isTyping) {
            flushQueue();
        }
    }, [messageQueue, isTyping]);

    const sendMessage = async () => {
        if (!input.trim()) return;

        const userMessage = { sender: "user", text: input };
        setInput("");
        setIsTyping(true);

        let imageUrl = null;

        if (imageFile) {
            try {
                imageUrl = await uploadImageToSupabase(imageFile, "chat");
                console.log("üì∑ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏôÑÎ£å:", imageUrl);

                const imageMessage = { sender: "user", text: "", imageUrl };
                setMessages((prev) => [...prev, userMessage, imageMessage]);

            } catch (err) {
                console.error("Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïã§Ìå®:", err.message);

                setMessages((prev) => [...prev, userMessage, {
                    sender: "system",
                    text: "‚ö†Ô∏è Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏñ¥Ïöî. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.",
                }]);
            }
            setImageFile(null);
            setImagePreviewUrl(null);
        } else {
            setMessages((prev) => [...prev, userMessage]);
        }

        const aiResponse = await sendMessageToOpenAI(sessionId, input, brand, category, subcategory, question, imageUrl);
        console.log("üß† FixBot ÏùëÎãµ ÎÇ¥Ïö©:", aiResponse);

        setMessageQueue(prev => [...prev, {
            sender: "bot",
            text: aiResponse,
        }]);

        setIsTyping(false);
    };

    return (
        <div className="chat-container">
            <button className="top-right" onClick={() => window.history.back()}>
                üîô Îí§Î°ú Í∞ÄÍ∏∞
            </button>

            <div className="chat-box">
                {messages.map((msg, index) => (
                    <div key={index} className={msg.sender === "bot" ? "bot-message" : "user-message"}>
                        {msg.sender === "bot" ? "ü§ñ" : "üë§"} {msg.text && msg.text.split("\n").map((line, i) => <p key={i}>{line}</p>)} {msg.imageUrl && (
                        <div className="chat-image">
                            <img src={msg.imageUrl} alt="ÏóÖÎ°úÎìú Ïù¥ÎØ∏ÏßÄ" />
                        </div>
                    )}
                    </div>
                ))}
                {isTyping && (
                    <div className="bot-message">ü§ñ <p>ÏûÖÎ†• Ï§ë...</p></div>
                )}
            </div>

            {searchQuery ? (
                <div className="button-options">
                    <button onClick={() => navigate(`/results?query=${encodeURIComponent(searchQuery)}`)}>
                        üîç Í≤ÄÏÉâ Í≤∞Í≥º Î≥¥Í∏∞
                    </button>
                    <button
                        onClick={() => {
                            setSearchQuery(null);
                            const newId = crypto.randomUUID();
                            localStorage.setItem("fixbot_sessionId", newId); // ÏÉà ÏÑ∏ÏÖò Ï†ÄÏû•
                            window.location.reload(); // ÏÉàÎ°úÍ≥†Ïπ®ÏúºÎ°ú Ï¥àÍ∏∞Ìôî
                            setMessages([
                                {
                                    sender: "bot",
                                    text: `ÏïàÎÖïÌïòÏÑ∏Ïöî! üòä Ï†ÄÎäî FixBotÏûÖÎãàÎã§.\n` +
                                        `Í≥†Í∞ùÎãòÍªòÏÑú ÏûÖÎ†•ÌïòÏã† Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï†Í≤åÏöî!\n` +
                                        `Î∏åÎûúÎìú: ${brand} | Ïπ¥ÌÖåÍ≥†Î¶¨: ${category} | ÏÑ∏Î∂Ä Ïπ¥ÌÖåÍ≥†Î¶¨: ${subcategory}\n` +
                                        `ÏßàÎ¨∏: ${question}\n` +
                                        `üîç ÎßûÎã§Î©¥ ÏïÑÎûò Ï∞ΩÏóê ÎåÄÎãµÌï¥Ï£ºÏÑ∏Ïöî!`
                                }
                            ]);
                        }}
                    >
                        üí¨ Îã§Ïãú Î¨ºÏñ¥Î≥¥Í∏∞
                    </button>
                </div>
            ) : (
                <div>
                    <div className="input-area">
                        <input
                            type="text"
                            value={input}
                            maxLength={1000}
                            onChange={(e) => {
                                const value = e.target.value;
                                if (value.length > 1000) {
                                    alert("‚ùóÏûÖÎ†•ÏùÄ ÏµúÎåÄ 1000ÏûêÍπåÏßÄ Í∞ÄÎä•Ìï©ÎãàÎã§.");
                                    return;
                                }
                                setInput(value);
                            }}
                            onKeyDown={(e) => {
                                if (e.key === "Enter" && !isTyping) {
                                    e.preventDefault();
                                    sendMessage();
                                }
                            }}
                            placeholder="Î¨∏Ï†úÏóê ÎåÄÌï¥ Îçî ÏûêÏÑ∏Ìûà ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî..."
                        />
                        <button onClick={sendMessage} disabled={isTyping}>
                            {isTyping ? "‚åõ Ï≤òÎ¶¨ Ï§ë..." : "üì© Ï†ÑÏÜ°"}
                        </button>
                    </div>

                    <div className="image-upload-area">
                        <label className="upload-button">
                            üìé Ïù¥ÎØ∏ÏßÄ Ï≤®Î∂Ä
                            <input type="file" accept="image/*" onChange={handleImageChange} hidden />
                        </label>
                        {imagePreviewUrl && (
                            <div className="image-preview">
                                <img src={imagePreviewUrl} alt="ÎØ∏Î¶¨Î≥¥Í∏∞" />
                            </div>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
}

export default ChatBot;
